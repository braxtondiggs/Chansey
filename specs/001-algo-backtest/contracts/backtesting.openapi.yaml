openapi: 3.1.0
info:
  title: Backtesting API
  version: 1.0.0
  summary: REST contracts for initiating and monitoring algorithm backtests within the Chansey platform.
servers:
  - url: https://api.chansey.local
paths:
  /backtests:
    get:
      summary: List backtest runs with optional filters
      tags: [Backtests]
      parameters:
        - name: algorithmId
          in: query
          schema:
            type: string
            format: uuid
        - name: mode
          in: query
          schema:
            type: string
            enum: [historical, live_replay]
        - name: status
          in: query
          schema:
            type: string
            enum: [queued, running, succeeded, failed, cancelled, paused]
        - name: createdAfter
          in: query
          schema:
            type: string
            format: date-time
        - name: createdBefore
          in: query
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Paginated collection of backtest runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestRunCollection'
    post:
      summary: Initiate a new backtest run
      tags: [Backtests]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBacktestRequest'
      responses:
        '202':
          description: Backtest accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestRunSummary'
        '400':
          description: Invalid configuration or dataset integrity issues
        '403':
          description: Algorithm not approved for backtesting
  /backtests/{id}:
    get:
      summary: Retrieve a single backtest run with summary metrics
      tags: [Backtests]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Backtest run details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestRunDetail'
        '404':
          description: Run not found
  /backtests/{id}/signals:
    get:
      summary: Fetch trading signals emitted during a run
      tags: [Backtests]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          schema:
            type: string
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 10
            maximum: 500
            default: 100
      responses:
        '200':
          description: Paginated list of signals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalCollection'
  /backtests/{id}/trades:
    get:
      summary: Fetch simulated order fills for a run
      tags: [Backtests]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of simulated order fills
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimulatedFill'
  /backtests/{id}/cancel:
    post:
      summary: Cancel a queued or running backtest
      tags: [Backtests]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Cancel request accepted
        '409':
          description: Run not in cancellable state
  /backtests/{id}/resume:
    post:
      summary: Resume a paused backtest after connectivity loss
      tags: [Backtests]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Resume accepted
        '409':
          description: Run not in paused state
  /comparison-reports:
    post:
      summary: Create a comparison report for selected runs
      tags: [Comparison Reports]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComparisonRequest'
      responses:
        '201':
          description: Comparison report created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComparisonReportDetail'
  /comparison-reports/{id}:
    get:
      summary: Retrieve computed metrics for a comparison report
      tags: [Comparison Reports]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Comparison report detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComparisonReportDetail'
        '404':
          description: Comparison report not found
components:
  schemas:
    BacktestRunCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BacktestRunSummary'
        nextCursor:
          type: string
          nullable: true
    BacktestRunSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        algorithm:
          $ref: '#/components/schemas/AlgorithmRef'
        marketDataSet:
          $ref: '#/components/schemas/MarketDataSetRef'
        mode:
          type: string
          enum: [historical, live_replay]
        status:
          type: string
          enum: [queued, running, succeeded, failed, cancelled, paused]
        initiatedBy:
          $ref: '#/components/schemas/UserRef'
        initiatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
        durationMs:
          type: integer
          nullable: true
        warningFlags:
          type: array
          items:
            type: string
        keyMetrics:
          $ref: '#/components/schemas/MetricSnapshot'
    BacktestRunDetail:
      allOf:
        - $ref: '#/components/schemas/BacktestRunSummary'
        - type: object
          properties:
            configSnapshot:
              $ref: '#/components/schemas/ConfigSnapshot'
            signalsCount:
              type: integer
            tradesCount:
              type: integer
            auditTrail:
              type: array
              items:
                $ref: '#/components/schemas/AuditEntry'
            deterministicSeed:
              type: string
    CreateBacktestRequest:
      type: object
      required: [algorithmId, marketDataSetId, mode]
      properties:
        algorithmId:
          type: string
          format: uuid
        marketDataSetId:
          type: string
          format: uuid
        mode:
          type: string
          enum: [historical, live_replay]
        parametersOverride:
          type: object
          additionalProperties: true
        executionWindow:
          type: object
          properties:
            startAt:
              type: string
              format: date-time
            endAt:
              type: string
              format: date-time
        deterministicSeed:
          type: string
          description: Optional user-supplied seed for reproducibility
    SignalCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TradingSignal'
        nextCursor:
          type: string
          nullable: true
    TradingSignal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        signalType:
          type: string
          enum: [entry, exit, adjustment, risk_control]
        instrument:
          type: string
        direction:
          type: string
          enum: [long, short, flat]
        quantity:
          type: number
        price:
          type: number
          nullable: true
        payload:
          type: object
          additionalProperties: true
    SimulatedFill:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderType:
          type: string
          enum: [market, limit, stop, stop_limit]
        status:
          type: string
          enum: [filled, partial, cancelled]
        filledQuantity:
          type: number
        averagePrice:
          type: number
        fees:
          type: number
        slippageBps:
          type: number
        executionTimestamp:
          type: string
          format: date-time
        linkedSignalId:
          type: string
          format: uuid
          nullable: true
    AlgorithmRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
    MarketDataSetRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
        timeframe:
          type: string
          enum: [tick, second, minute, hour, day]
    UserRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
        displayName:
          type: string
    MetricSnapshot:
      type: object
      properties:
        totalReturn:
          type: number
        maxDrawdown:
          type: number
        volatility:
          type: number
        sharpeLikeRatio:
          type: number
        winRate:
          type: number
        profitFactor:
          type: number
        maxAdverseExcursion:
          type: number
    ConfigSnapshot:
      type: object
      description: Immutable capture of algorithm parameters and run configuration.
      additionalProperties: true
    AuditEntry:
      type: object
      properties:
        previousStatus:
          type: string
        nextStatus:
          type: string
        timestamp:
          type: string
          format: date-time
        actor:
          type: string
          description: User or system identity
        note:
          type: string
    CreateComparisonRequest:
      type: object
      required: [name, runIds]
      properties:
        name:
          type: string
        runIds:
          type: array
          minItems: 2
          items:
            type: string
            format: uuid
        filters:
          type: object
          properties:
            timeframe:
              type: string
              nullable: true
            marketRegime:
              type: string
              nullable: true
            algorithmIds:
              type: array
              items:
                type: string
                format: uuid
    ComparisonReportDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/UserRef'
        filters:
          type: object
        runs:
          type: array
          items:
            type: object
            properties:
              run:
                $ref: '#/components/schemas/BacktestRunSummary'
              metrics:
                $ref: '#/components/schemas/MetricSnapshot'
              benchmark:
                type: object
                nullable: true
                properties:
                  symbol:
                    type: string
                  return:
                    type: number
        summary:
          type: object
          properties:
            bestReturn:
              type: number
            bestSharpe:
              type: number
            lowestDrawdown:
              type: number
        notes:
          type: array
          description: Optional annotations added by portfolio managers
          items:
            type: object
            properties:
              author:
                $ref: '#/components/schemas/UserRef'
              body:
                type: string
              createdAt:
                type: string
                format: date-time
