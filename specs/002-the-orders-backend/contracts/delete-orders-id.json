{
  "endpoint": "DELETE /api/orders/:id",
  "description": "Cancel an open order on the exchange",
  "authentication": "Required (JWT Bearer token)",
  "rateLimit": "100 requests/minute per user",
  "request": {
    "headers": {
      "Authorization": "Bearer <jwt_token>"
    },
    "pathParameters": {
      "id": "uuid (order ID)"
    },
    "example": {
      "url": "/api/orders/a1b2c3d4-e5f6-4321-a987-123456789abc"
    }
  },
  "response": {
    "success": {
      "status": 200,
      "body": {
        "id": "uuid",
        "exchangeKeyId": "uuid",
        "symbol": "string",
        "orderType": "string",
        "side": "string",
        "quantity": "number",
        "price": "number | null",
        "status": "string (canceled)",
        "isManual": "boolean",
        "exchangeOrderId": "string | null",
        "filledQuantity": "number",
        "fee": "number | null",
        "stopPrice": "number | null",
        "trailingAmount": "number | null",
        "trailingType": "string | null",
        "takeProfitPrice": "number | null",
        "stopLossPrice": "number | null",
        "ocoLinkedOrderId": "string | null",
        "createdAt": "ISO 8601 timestamp",
        "updatedAt": "ISO 8601 timestamp"
      },
      "example": {
        "id": "a1b2c3d4-e5f6-4321-a987-123456789abc",
        "exchangeKeyId": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
        "symbol": "BTC/USDT",
        "orderType": "limit",
        "side": "buy",
        "quantity": 0.01,
        "price": 50000.00,
        "status": "canceled",
        "isManual": true,
        "exchangeOrderId": "12345678",
        "filledQuantity": 0,
        "fee": null,
        "stopPrice": null,
        "trailingAmount": null,
        "trailingType": null,
        "takeProfitPrice": null,
        "stopLossPrice": null,
        "ocoLinkedOrderId": null,
        "createdAt": "2025-10-08T12:00:00.000Z",
        "updatedAt": "2025-10-08T12:05:00.000Z"
      }
    },
    "errors": {
      "401_unauthorized": {
        "status": 401,
        "body": {
          "statusCode": 401,
          "message": "Unauthorized",
          "error": "Unauthorized"
        }
      },
      "403_forbidden": {
        "status": 403,
        "body": {
          "statusCode": 403,
          "message": "You do not have permission to cancel this order",
          "error": "Forbidden"
        }
      },
      "404_not_found": {
        "status": 404,
        "body": {
          "statusCode": 404,
          "message": "Order not found",
          "error": "Not Found"
        }
      },
      "409_already_filled": {
        "status": 409,
        "body": {
          "statusCode": 409,
          "message": "Cannot cancel order with status 'filled'",
          "error": "Conflict"
        }
      },
      "409_already_canceled": {
        "status": 409,
        "body": {
          "statusCode": 409,
          "message": "Order is already canceled",
          "error": "Conflict"
        }
      },
      "503_exchange_unavailable": {
        "status": 503,
        "body": {
          "statusCode": 503,
          "message": "Exchange API is currently unavailable. Order cancellation failed.",
          "error": "Service Unavailable"
        }
      }
    }
  },
  "validation": {
    "order_exists": "Order ID must exist in database",
    "user_ownership": "Order must belong to authenticated user",
    "status_check": "Order status must be 'open' or 'partially_filled'",
    "cannot_cancel_filled": "Cannot cancel orders with status 'filled'",
    "cannot_cancel_rejected": "Cannot cancel orders with status 'rejected'",
    "cannot_cancel_expired": "Cannot cancel orders with status 'expired'"
  },
  "behavior": {
    "exchange_cancellation": "Call CCXT cancelOrder() to cancel on exchange",
    "status_update": "Update order status to 'canceled' in database",
    "balance_release": "Locked funds released back to available balance",
    "oco_handling": "If order is part of OCO pair, cancel linked order as well",
    "idempotency": "Canceling already-canceled order returns 409 (not 200)"
  },
  "performance": {
    "target": "< 3 seconds p95",
    "steps": [
      "Fetch order from database (< 100ms)",
      "Validate ownership and status (< 50ms)",
      "Cancel on exchange via CCXT (< 1500ms)",
      "Update database status (< 200ms)",
      "Handle OCO linked order if applicable (< 1500ms)"
    ]
  },
  "businessRules": {
    "FR-019": "Allow users to cancel open orders",
    "FR-020": "Prevent cancellation of already-filled orders",
    "FR-022": "Persist all order data including status changes"
  },
  "edgeCases": {
    "filled_before_cancel": {
      "scenario": "Order fills while cancellation is in progress",
      "behavior": "Return 409 Conflict with message 'Order was filled before cancellation'"
    },
    "partially_filled": {
      "scenario": "Order is partially filled when canceled",
      "behavior": "Cancel remaining quantity, keep filled quantity recorded"
    },
    "exchange_offline": {
      "scenario": "Exchange API is down during cancellation",
      "behavior": "Return 503 Service Unavailable, do NOT update local status"
    },
    "oco_cancellation": {
      "scenario": "Canceling one side of OCO order",
      "behavior": "Also cancel the linked order on exchange and update both statuses"
    }
  }
}
