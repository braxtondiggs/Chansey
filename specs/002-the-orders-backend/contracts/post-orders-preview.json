{
  "endpoint": "POST /api/orders/preview",
  "description": "Preview order costs and validate parameters without submitting to exchange",
  "authentication": "Required (JWT Bearer token)",
  "rateLimit": "100 requests/minute per user",
  "request": {
    "headers": {
      "Authorization": "Bearer <jwt_token>",
      "Content-Type": "application/json"
    },
    "body": {
      "exchangeKeyId": "uuid",
      "symbol": "string (e.g., 'BTC/USDT')",
      "orderType": "enum: market | limit | stop_loss | stop_limit | trailing_stop | take_profit | oco",
      "side": "enum: buy | sell",
      "quantity": "number (positive)",
      "price": "number (optional, depends on orderType)",
      "stopPrice": "number (optional, depends on orderType)",
      "trailingAmount": "number (optional, depends on orderType)",
      "trailingType": "enum: amount | percentage (optional, depends on orderType)",
      "takeProfitPrice": "number (optional, depends on orderType)",
      "stopLossPrice": "number (optional, depends on orderType)"
    },
    "examples": {
      "market_buy_preview": {
        "exchangeKeyId": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
        "symbol": "BTC/USDT",
        "orderType": "market",
        "side": "buy",
        "quantity": 0.01
      },
      "limit_sell_preview": {
        "exchangeKeyId": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
        "symbol": "ETH/USD",
        "orderType": "limit",
        "side": "sell",
        "quantity": 0.5,
        "price": 2500.00
      }
    }
  },
  "response": {
    "success": {
      "status": 200,
      "body": {
        "symbol": "string",
        "side": "string",
        "orderType": "string",
        "quantity": "number",
        "price": "number | null",
        "currentMarketPrice": "number",
        "estimatedCost": "number",
        "estimatedFee": "number",
        "estimatedTotal": "number",
        "availableBalance": "number",
        "requiredBalance": "number",
        "sufficientBalance": "boolean",
        "stopPrice": "number | null",
        "trailingAmount": "number | null",
        "trailingType": "string | null",
        "takeProfitPrice": "number | null",
        "stopLossPrice": "number | null",
        "warnings": "string[]",
        "exchangeName": "string",
        "minOrderSize": "number",
        "maxOrderSize": "number",
        "pricePrecision": "number",
        "quantityPrecision": "number"
      },
      "example": {
        "symbol": "BTC/USDT",
        "side": "buy",
        "orderType": "limit",
        "quantity": 0.01,
        "price": 50000.00,
        "currentMarketPrice": 51000.00,
        "estimatedCost": 500.00,
        "estimatedFee": 0.50,
        "estimatedTotal": 500.50,
        "availableBalance": 1000.00,
        "requiredBalance": 500.50,
        "sufficientBalance": true,
        "stopPrice": null,
        "trailingAmount": null,
        "trailingType": null,
        "takeProfitPrice": null,
        "stopLossPrice": null,
        "warnings": [
          "Limit price $50,000 is 2% below current market price $51,000"
        ],
        "exchangeName": "Binance US",
        "minOrderSize": 0.0001,
        "maxOrderSize": 9000.0,
        "pricePrecision": 2,
        "quantityPrecision": 8
      }
    },
    "errors": {
      "400_validation": {
        "status": 400,
        "body": {
          "statusCode": 400,
          "message": ["price must be a positive number"],
          "error": "Bad Request"
        }
      },
      "404_exchange_key_not_found": {
        "status": 404,
        "body": {
          "statusCode": 404,
          "message": "Exchange key not found or does not belong to user",
          "error": "Not Found"
        }
      },
      "422_invalid_trading_pair": {
        "status": 422,
        "body": {
          "statusCode": 422,
          "message": "Trading pair BTC/XYZ is not supported on this exchange",
          "error": "Unprocessable Entity"
        }
      },
      "503_exchange_unavailable": {
        "status": 503,
        "body": {
          "statusCode": 503,
          "message": "Unable to fetch current market price. Exchange may be unavailable.",
          "error": "Service Unavailable"
        }
      }
    }
  },
  "validation": {
    "same_as_place_order": "All validation rules identical to POST /api/orders",
    "no_balance_lock": "Balance is checked but not locked (preview only)",
    "no_exchange_submission": "Order is NOT submitted to exchange"
  },
  "performance": {
    "target": "< 2 seconds p95",
    "steps": [
      "Validate DTO (< 100ms)",
      "Fetch current market price (< 500ms, cached 30s)",
      "Fetch user balance (< 500ms, cached 1min)",
      "Calculate fees (< 100ms)",
      "Generate warnings (< 100ms)"
    ]
  },
  "caching": {
    "market_price": "30 seconds TTL",
    "user_balance": "1 minute TTL",
    "exchange_markets": "5 minutes TTL"
  },
  "warnings": [
    {
      "condition": "price deviates >50% from market",
      "message": "Price is {percentage}% {above|below} current market price"
    },
    {
      "condition": "quantity > 10% of 24h volume",
      "message": "Large order size relative to market volume"
    },
    {
      "condition": "insufficient balance",
      "message": "Insufficient balance. You have {available} but need {required}"
    },
    {
      "condition": "order size below minimum",
      "message": "Order size {quantity} is below minimum {min}"
    },
    {
      "condition": "order size above maximum",
      "message": "Order size {quantity} exceeds maximum {max}"
    }
  ],
  "businessRules": {
    "FR-004": "Show order preview with estimated cost, fees, and total",
    "FR-012": "Check user's available balance in real-time",
    "FR-013": "Display warning for prices significantly distant from market",
    "FR-030": "Fetch current market prices for preview",
    "NFR-001": "Order validation must complete within 2 seconds"
  }
}
